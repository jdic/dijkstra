import { Dijkstra } from '@/algorithms/Dijkstra'
import type { Board } from '@/types/global'

describe('Dijkstra Algorithm', () =>
{
  it('should find the shortest path', () =>
  {
    const board: Board =
    [
      ['ðŸŸ©', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ'],
      ['â¬œ', 'â¬›', 'â¬›', 'â¬œ', 'â¬›'],
      ['â¬œ', 'â¬›', 'ðŸŸ¥', 'â¬œ', 'â¬œ'],
      ['â¬œ', 'â¬›', 'â¬œ', 'â¬›', 'â¬œ'],
      ['â¬œ', 'â¬œ', 'â¬œ', 'â¬›', 'â¬›'],
    ]

    const dijkstra = new Dijkstra(board)
    const solved = dijkstra.solve()

    const solvedBoard: Board =
    [
      ['ðŸŸ©', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'â¬œ'],
      ['â¬œ', 'â¬›', 'â¬›', 'ðŸŸ¦', 'â¬›'],
      ['â¬œ', 'â¬›', 'ðŸŸ¥', 'ðŸŸ¦', 'â¬œ'],
      ['â¬œ', 'â¬›', 'â¬œ', 'â¬›', 'â¬œ'],
      ['â¬œ', 'â¬œ', 'â¬œ', 'â¬›', 'â¬›'],
    ]

    expect(solved).toEqual(solvedBoard)
  })

  it('should return the same board if there is no path', () =>
  {
    const board: Board =
    [
      ['ðŸŸ©', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ'],
      ['â¬œ', 'â¬›', 'â¬›', 'â¬›', 'â¬›'],
      ['â¬œ', 'â¬›', 'ðŸŸ¥', 'â¬œ', 'â¬œ'],
      ['â¬œ', 'â¬›', 'â¬›', 'â¬›', 'â¬œ'],
      ['â¬œ', 'â¬œ', 'â¬œ', 'â¬›', 'â¬›'],
    ]

    const dijkstra = new Dijkstra(board)
    const solved = dijkstra.solve()

    expect(solved).toEqual(board)
  })
})
